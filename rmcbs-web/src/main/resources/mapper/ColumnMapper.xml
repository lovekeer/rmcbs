<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.bfd.dao.mapper.ColumnMapper">
    <resultMap id="BaseResultMap" type="com.bfd.bean.ColumnBean">
        <result column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="alias_name" property="aliasName"/>
        <result column="parent_id" property="parentId"/>
        <result column="type" property="type"/>
        <result column="sort" property="sort"/>
        <result column="create_time" property="createTime"/>
    </resultMap>

    <select id="getColumnList" resultMap="BaseResultMap">
        SELECT * FROM t_column
    </select>

    <select id="getColumnOneLevel" resultType="Long">
        SELECT
	        t2.id
        FROM
            `t_column` t1
        LEFT JOIN t_column t2 ON t1.parent_id = t2.id
        WHERE
            t1.parent_id != 0
        GROUP BY t2.id
    </select>

    <select id="getColumnTotal" resultType="Long">
        SELECT count(0) FROM t_column where parent_id = 0
    </select>

    <select id="getColumnListByParentId" resultMap="BaseResultMap">
        SELECT * FROM t_column where parent_id = #{id}
    </select>

    <select id="getColumnInfoById" resultMap="BaseResultMap">
        SELECT * FROM t_column where id = #{id}
    </select>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO t_column(
          name,
          alias_name,
          parent_id,
          type,
          sort,
          create_time,
          create_user,
          update_time,
          update_user
        )VALUES(
          #{name},
          #{aliasName},
          #{parentId},
          #{type},
          #{sort},
          now(),
          #{createUser},
          now(),
          #{updateUser}
        )
    </insert>

    <update id="update">
        UPDATE t_column
        SET name = #{name},
        update_time = now(),
        update_user = #{updateUser}
        <if test="aliasName != null and aliasName != '' ">
            , alias_name = #{aliasName}
        </if>
        , sort = #{sort}
        WHERE id = #{id}
    </update>

    <delete id="delete">
        delete from t_column where id = #{id}
    </delete>

    <insert id="addBookMetadata" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO t_column_book(
          column_id,
          metadata_id,
          sort,
          create_time
        )VALUES(
          #{columnId},
          #{metadataId},
          #{sort},
          NOW()
        )
    </insert>

    <delete id="batchDeleteColumn">
        delete from t_column where id in
        <foreach collection="list" item="ColumnBean" separator="," open="(" close=")">
            #{ColumnBean.id}
        </foreach>
    </delete>

    <delete id="deleteColumnBookByColumnId">
        delete from t_column_book where column_id = #{id}
    </delete>

    <delete id="batchDeleteColumnBookByColumnId">
        delete from t_column_book where column_id in
        <foreach collection="list" item="ColumnBean" separator="," open="(" close=")">
            #{ColumnBean.id}
        </foreach>
    </delete>

    <update id="updateSortAddByParentId">
        UPDATE t_column
        SET sort = sort + 1
        WHERE parent_id = #{parentId}
    </update>

    <update id="updateRelationSortAddByColumnId">
        UPDATE t_column_book
        SET sort = sort + #{n}
        WHERE column_id = #{columnId}
    </update>

    <delete id="batchDeleteFromColumn">
        delete
        from t_column_book
        where column_id = #{columnId}
        and metadata_id
        in
        <foreach collection="metadataIds" item="metadataId" separator="," open="(" close=")">
            #{metadataId}
        </foreach>
    </delete>

    <select id="getMetadataListByColumnId" parameterType="long" resultType="com.bfd.param.vo.BookVO">
        SELECT id AS id,
          unique_id AS uniqueId,
          book_name AS bookName,
          author AS author,
          responsible AS responsible,
          press AS press,
          publish_place AS publishPlace,
          publish_date AS publishDate,
          language AS language,
          book_isbn AS bookIsbn,
          book_pdf AS bookPdf,
          book_epub AS bookEpub,
          book_xml AS bookXml
        FROM t_book_metadata
        WHERE id
        in (
          select metadata_id
          from t_column_book
          where column_id = #{columnId}
        );
    </select>

    <update id="updateColumnBookRelationSort">
        UPDATE t_column_book
        SET sort = #{sort}
        WHERE column_id = #{columnId}
        and metadata_id  =#{metadataId}
    </update>

    <select id="getColumnBookRelationBean" resultType="java.util.Map">
        SELECT id,
          metadata_id,
          column_id,
          sort
        FROM t_column_book
        WHERE column_id = #{columnId}
        and metadata_id  = #{metadataId}
    </select>

    <select id="getColumnBookRelationList" resultType="java.util.Map">
        SELECT id,
        metadata_id,
        column_id,
        sort
        FROM t_column_book
        WHERE column_id
        IN
        <foreach collection="columnId" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </select>

    <select id="getBeforeRelationIdsByColumnIdAndMetadataId" resultType="long">
        select id
        from t_column_book
        where column_id = #{columnId}
        and sort &lt; (
          select sort
          from t_column_book
          where column_id = #{columnId}
          and metadata_id = #{metadataId}
          )
    </select>

    <select id="getAfterRelationIdsByColumnIdAndMetadataId" resultType="long">
        select id
        from t_column_book
        where column_id = #{columnId}
        and sort &gt; (
        select sort
        from t_column_book
        where column_id = #{columnId}
        and metadata_id = #{metadataId}
        )
    </select>


    <update id="updateRelationSortAddByIds">
        UPDATE t_column_book
        SET sort = sort + 1
        WHERE id
        IN
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </update>

    <update id="updateRelationSortReduceByIds">
        UPDATE t_column_book
        SET sort = sort - 1
        WHERE id
        IN
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </update>

    <select id="getMaxSortByColumnId" resultType="int">
    select max(sort)
    from t_column_book
    where column_id = #{columnId}
    </select>

    <select id="getMetadataListForColumn" resultType="com.bfd.param.vo.BookVO">
        SELECT id AS id,
        unique_id AS uniqueId,
        book_name AS bookName,
        author AS author,
        responsible AS responsible,
        press AS press,
        publish_place AS publishPlace,
        publish_date AS publishDate,
        language AS language,
        book_isbn AS bookIsbn,
        book_pdf AS bookPdf,
        book_epub AS bookEpub,
        book_xml AS bookXml
        FROM t_book_metadata
        WHERE id
        in (
        select metadata_id
        from t_column_book
        where column_id
        IN
        <foreach collection="columnId" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
        )
        <if test="startTime!=null and startTime != '' ">
            <![CDATA[ AND publish_date >= #{startTime} AND publish_date <= #{endTime}]]>
        </if>
        <if test="author!=null and author != '' ">
            <![CDATA[ AND author LIKE '%${author}%']]>
        </if>
        <if test="bookName!=null and bookName != '' ">
            <![CDATA[ AND book_name LIKE '%${bookName}%']]>
        </if>
        <if test="bookIsbn!=null and bookIsbn != '' ">
            <![CDATA[ AND book_isbn LIKE '%${bookIsbn}%']]>
        </if>
        <if test="uniqueId!=null and uniqueId != '' ">
            <![CDATA[ AND unique_id LIKE '%${uniqueId}%']]>
        </if>
        ORDER BY  ${sortField} ${sortType}
    </select>

    <select id="getSkinTemplateByType" resultType="com.bfd.bean.PublicTemplateBean">
        SELECT id AS id,
        template_id AS templateId,
        type AS type
        FROM t_public_template
        WHERE type = #{type}
    </select>

    <update id="updateSkinTemplate">
        UPDATE t_public_template
        SET template_id = #{templateId}
        WHERE type = #{type}
    </update>

    <insert id="addSkinTemplate" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO t_public_template(
          template_id,
          type
        )VALUES(
          #{templateId},
          #{type}
        )
    </insert>

    <select id="getBookNumber" resultType="int">
        select count(*) from t_column_book where column_id = #{id}
    </select>
    
    <select id="getColumnBusinessRelation" parameterType="list" resultType="com.bfd.bean.BusinessColumnBean">
    	SELECT id,
    		   column_id AS columnId,
    		   business_id 	AS businessId,
    		   create_time AS createTime
    	  FROM t_business_column
    	  <where>
    	  	column_id IN
			<foreach collection="list" item="column" separator="," open="(" close=")">
				#{column.id} 
      	 	</foreach>
    	  </where>
    </select>

    <select id="getBookNumberByA" resultType="int">
        select count(0)
        from (
          select *
          from t_column_book
          where column_id
          in (
            select id
            from t_column
            where parent_id = #{id}
          )
          GROUP BY metadata_id
        ) t;
    </select>

    <select id="getBookNumberByFirst" resultType="int">
        select count(0)
        from t_column_book
        where column_id = #{id}
    </select>

    <select id="getColumnListByRang" resultMap="BaseResultMap">
        SELECT * FROM t_column where parent_id = #{id} and
        sort &gt;= #{firstSort} and sort &lt;#{secondSort}
    </select>

    <select id="getColumnListByAfter" resultMap="BaseResultMap">
        SELECT * FROM t_column where parent_id = #{id} and
        sort &gt;= #{firstSort}
    </select>
</mapper>