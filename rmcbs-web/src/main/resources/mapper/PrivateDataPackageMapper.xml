<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.bfd.dao.mapper.PrivateDataPackageMapper">
    <resultMap id="BaseResultMap" type="com.bfd.bean.PrivateDataPackageBean">
        <result column="id" property="id"/>
        <result column="business_id" property="businessId"/>
        <result column="name" property="name"/>
        <result column="alias_name" property="aliasName"/>
        <result column="parent_id" property="parentId"/>
        <result column="type" property="type"/>
        <result column="sort" property="sort"/>
        <result column="create_time" property="createTime"/>
    </resultMap>

    <select id="getPrivatePackageList" resultMap="BaseResultMap">
        SELECT * FROM t_private_data_package where business_id = #{businessId} ORDER BY create_time desc
    </select>

    <select id="getPrivateDataPackageListByParentId" resultMap="BaseResultMap">
        SELECT * FROM t_private_data_package where parent_id = #{id}
    </select>

    <select id="getPrivatePackageInfoById" resultMap="BaseResultMap">
        SELECT * FROM t_private_data_package where id = #{id}
    </select>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO t_private_data_package(
          business_id,
          name,
          alias_name,
          parent_id,
          type,
          sort,
          create_time,
          create_user,
          update_time,
          update_user
        )VALUES(
          #{businessId},
          #{name},
          #{aliasName},
          #{parentId},
          #{type},
          #{sort},
          now(),
          #{createUser},
          now(),
          #{updateUser}
        )
    </insert>

    <update id="update">
        UPDATE t_private_data_package
        SET name = #{name},
        update_time = now(),
        update_user = #{updateUser}
        <if test="aliasName != null and aliasName != '' ">
            , alias_name = #{aliasName}
        </if>
        <if test="sort != null and sort != '' ">
            , sort = #{sort}
        </if>
        WHERE id = #{id}
    </update>

    <delete id="delete">
        delete from t_private_data_package where id = #{id}
    </delete>

    <insert id="addBookForPrivateDataPackage" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO t_private_data_package_book(
            data_package_id,
            metadata_id,
            create_time
        )VALUES
        <foreach collection="metadataIds" item="metadataId" separator=",">
            (
            #{privateDataPackageId},
            #{metadataId},
            NOW()
            )
        </foreach>
    </insert>

    <delete id="batchDeletePrivateDataPackage">
        delete from t_private_data_package
        where id
        in
        <foreach collection="list" item="x" separator="," open="(" close=")">
            #{x.id}
        </foreach>

    </delete>

    <delete id="deleteRelationByDataPackageId">
        delete from t_private_data_package_book where data_package_id = #{id}
    </delete>

    <delete id="batchDeleteRelationByPrivateDataPackageId">
        delete from t_private_data_package_book
        where data_package_id
        in
        <foreach collection="list" item="PrivateDataPackageBean" separator="," open="(" close=")">
            #{PrivateDataPackageBean.id}
        </foreach>

    </delete>

    <delete id="batchDeleteFromPrivateDataPackage">
        delete from t_private_data_package_book
        where data_package_id = #{privateDataPackageId}
        and metadata_id
        in
        <foreach collection="metadataIds" item="metadataId" separator="," open="(" close=")">
            #{metadataId}
        </foreach>
    </delete>

    <select id="getMetadataListByPrivatePackageId" parameterType="long" resultType="com.bfd.param.vo.BookVO">
        SELECT id AS id,
          unique_id AS uniqueId,
          book_name AS bookName,
          author AS author,
          responsible AS responsible,
          press AS press,
          publish_place AS publishPlace,
          publish_date AS publishDate,
          language AS language,
          book_isbn AS bookIsbn,
          book_pdf AS bookPdf,
          book_epub AS bookEpub,
          book_xml AS bookXml
        FROM t_book_metadata
        WHERE id
        in (
          select metadata_id
          from t_private_data_package_book
          where data_package_id = #{privateDataPackageId}
        );
    </select>

    <select id="queryMetadataList" resultType="com.bfd.param.vo.BookVO">
        SELECT id AS id,
        unique_id AS uniqueId,
        book_name AS bookName,
        author AS author,
        responsible AS responsible,
        press AS press,
        publish_place AS publishPlace,
        publish_date AS publishDate,
        language AS language,
        book_isbn AS bookIsbn,
        book_pdf AS bookPdf,
        book_epub AS bookEpub,
        book_xml AS bookXml
        FROM t_book_metadata
        WHERE 1 = 1
        <if test="startTime!=null and startTime != '' ">
            <![CDATA[ AND publish_date >= #{startTime} AND publish_date <= #{endTime}]]>
        </if>
        <if test="bookPdf!=null and bookPdf != '' ">
            <![CDATA[ AND book_pdf = #{bookPdf}]]>
        </if>
        <if test="bookEpub!=null and bookEpub != '' ">
            <![CDATA[ AND book_epub = #{bookEpub}]]>
        </if>
        <if test="bookXml!=null and bookXml != '' ">
            <![CDATA[ AND book_xml = #{bookXml}]]>
        </if>
        <if test="bookStatus!=null and bookStatus != '' ">
            AND book_xml = 0 AND book_pdf = 0 AND book_epub = 0
        </if>
        <if test="uniqueId!=null and uniqueId != '' ">
            <![CDATA[ AND unique_id LIKE '${uniqueId}%']]>
        </if>
        <if test="bookIsbn!=null and bookIsbn != '' ">
            <![CDATA[ AND book_isbn LIKE '%${bookIsbn}%']]>
        </if>
        <if test="bookName!=null and bookName != '' ">
            <![CDATA[ AND book_name LIKE '%${bookName}%']]>
        </if>
        ORDER BY  ${sortField} ${sortType}
    </select>

    <select id="getMetadataListForPrivatePackage" resultType="com.bfd.param.vo.BookVO">
        SELECT id AS id,
        unique_id AS uniqueId,
        book_name AS bookName,
        author AS author,
        responsible AS responsible,
        press AS press,
        publish_place AS publishPlace,
        publish_date AS publishDate,
        language AS language,
        book_isbn AS bookIsbn,
        book_pdf AS bookPdf,
        book_epub AS bookEpub,
        book_xml AS bookXml
        FROM t_book_metadata
        WHERE id
        in (
        select metadata_id
        from t_private_data_package_book
        where data_package_id
        IN
        <foreach collection="privateDataPackageId" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
        )
        <if test="startTime!=null and startTime != '' ">
            <![CDATA[ AND publish_date >= #{startTime} AND publish_date <= #{endTime}]]>
        </if>
        <if test="author!=null and author != '' ">
            <![CDATA[ AND author LIKE '%${author}%']]>
        </if>
        <if test="bookName!=null and bookName != '' ">
            <![CDATA[ AND book_name LIKE '%${bookName}%']]>
        </if>
        <if test="bookIsbn!=null and bookIsbn != '' ">
            <![CDATA[ AND book_isbn LIKE '%${bookIsbn}%']]>
        </if>
        <if test="uniqueId!=null and uniqueId != '' ">
            <![CDATA[ AND unique_id LIKE '%${uniqueId}%']]>
        </if>
        ORDER BY  ${sortField} ${sortType}
    </select>

    <select id="getBookNumber" resultType="int">
        select count(*) from t_private_data_package_book where data_package_id = #{id}
    </select>

    <select id="getBookNumberByA" resultType="int">
        select count(0)
        from (
          select *
          from t_private_data_package_book
          where data_package_id
          in (
            select id
            from t_private_data_package
            where parent_id = #{id}
          )
          GROUP BY metadata_id
        ) t;
    </select>

    <select id="getBookNumberByFirst" resultType="int">
        select count(0)
        from t_private_data_package_book
        where data_package_id = #{id}
    </select>
</mapper>